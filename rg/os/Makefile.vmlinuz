include $(RGSRC)/util.mak

MAKE_KERNEL_COMMAND=echo "No Kernel By Default"
ifdef CONFIG_ARMNOMMU
  LINUX_BOOTLOADER_DIR=$(CURDIR)/kernel/arch/armnommu/mach-$(CONFIG_ARCH_MACHINE)/boot/
  LINUX_BOOTLOADER_OBJECT=bootldr.o
  BOOTJUMP=bootjump
  BOOTSTRAP=$(BOOTJUMP)
endif
ifdef CONFIG_MIPS_IDT
  LINUX_BOOTLOADER_DIR=$(CURDIR)/kernel/arch/mips/boot/
  LINUX_BOOTLOADER_OBJECT=bootldr.o
endif

RAMDISK_SIZE:=$(call MSIZE,$(COMPRESSED_DISK))

CLEAN+=$(LINUX_BOOTLOADER_OBJECT) $(OPENRG_IMG) \
  $(wildcard vmlinuz* vmlinux* *.o *.bin *.strip) \
  $(OPENRG_PROD) $(BOOTJUMP) *.inc

KERNEL_SIZE=$(call MSIZE,vmlinuz)
KERNEL_SIZE_PAD=$(call MSIZE,vmlinuz.pad)
BOOTLOADER_SIZE=$(call MSIZE,$(LINUX_BOOTLOADER_OBJECT).bin)

VPATH=$(LINUX_BOOTLOADER_DIR):$(CURDIR)

ifdef LINUX_BOOTLOADER_DIR
  # Include the arch specific bootloader makefile to create the bootloader
  include $(LINUX_BOOTLOADER_DIR)/Makefile
endif

.PHONY : make_image
# For PCBOX we use an external bootloader (lilo) so we let the kernel do the
# dirty work. For all other archs, we compile the final image here.
ifneq ($(CONFIG_PCBOX),)
MAKE_KERNEL_COMMAND=$(MAKE) -C $(KERNEL_DIR) $(OPENRG_IMG)
make_image: dummy
else
ifneq ($(CONFIG_RG_UML),)
MAKE_KERNEL_COMMAND=$(MAKE) -C $(KERNEL_DIR) openrg.uml
make_image:
	make -C $(RGSRC)/vendor/jungo/uml/boot $(OPENRG_IMG)
else
# This is a workaround to create the image for IXP425, eventually this should
# be solved in a more elegent fashion 
ifneq ($(CONFIG_ARCH_IXP425)$(CONFIG_ARCH_CX8620X)$(CONFIG_ARCH_SL2312)$(CONFIG_ARCH_KS8695),)
ZIMAGE=$(CURDIR)/kernel/arch/arm/boot/zImage

MAKE_KERNEL_COMMAND=make -C $(KERNEL_DIR) zImage
make_image:
	cp -f $(ZIMAGE) $(OPENRG_IMG)
else
ifdef CONFIG_BOOTLDR_UBOOT
make_image:
	make -C $(RGSRC)/pkg/boot/u-boot $(OPENRG_IMG)
else
ifdef CONFIG_INFINEON_AMAZON
MAKE_KERNEL_COMMAND=make -C $(BUILDDIR)/os/linux/arch/mips/boot vmlinuz.bin.gz
make_image:
	make -C $(RGSRC)/vendor/infineon/amazon/boot $(OPENRG_IMG)
else
ifdef CONFIG_BCM947XX
MAKE_KERNEL_COMMAND=make -C $(KERNEL_DIR) vmlinuz.bin.gz
make_image:
	make -C $(RGSRC)/vendor/broadcom/bcm947/boot
	cp $(BUILDDIR)/vendor/broadcom/bcm947/boot/bootimg.bin $(BUILDDIR)/os/
  ifeq ($(CONFIG_COPY_CRAMFS_TO_RAM)$(CONFIG_SIMPLE_RAMDISK),)
	$(TRX) -o $(OPENRG_IMG) $(BUILDDIR)/os/bootimg.bin -b 768k $(COMPRESSED_DISK)
  else
	$(TRX) -o $(OPENRG_IMG) $(BUILDDIR)/os/bootimg.bin
  endif
  ifdef CONFIG_ARCH_BCM947_CYBERTAN
	rm -f $(BUILDDIR)/code.bin
	$(TOOLS_PREFIX)/tools/addpattern -i $(OPENRG_IMG) -o $(BUILDDIR)/code.bin -p W54G
	@echo "Cybertan pattern image is ready at $(BUILDDIR)/code.bin"
  endif
else
ifdef CONFIG_BCM963XX
MAKE_KERNEL_COMMAND=make -C $(BUILDDIR)/os/linux/arch/mips/boot vmlinuz.bin.gz
make_image:	
	make -C $(RGSRC)/vendor/broadcom/bcm963xx/boot $(OPENRG_IMG)
else
ifdef CONFIG_INCAIP
MAKE_KERNEL_COMMAND=make -C $(BUILDDIR)/os/linux/arch/mips/boot vmlinuz.bin.gz
make_image:	
	make -C $(RGSRC)/vendor/infineon/incaip/boot $(OPENRG_IMG)
else
ifdef CONFIG_ADM5120_COMMON
MAKE_KERNEL_COMMAND=make -C $(BUILDDIR)/os/linux/arch/mips/boot vmlinuz.bin.gz
make_image:	
	make -C $(RGSRC)/vendor/admtek/adm5120/boot $(OPENRG_IMG)
else
make_image: vmlinuz.pad $(LINUX_BOOTLOADER_OBJECT).bin real_boot_obj
    ifdef ARCH_PROLOG
	cat $(ARCH_PROLOG) > $(OPENRG_IMG)
    else
	rm -f $(OPENRG_IMG)
    endif
	cat $(LINUX_BOOTLOADER_OBJECT).bin >> $(OPENRG_IMG)
	cat vmlinuz.pad >> $(OPENRG_IMG)
	cat $(COMPRESSED_DISK) >> $(OPENRG_IMG)
endif
endif
endif
endif
endif
endif
endif
endif
endif

make_kernel:
	$(MAKE_KERNEL_COMMAND)

#ifndef CONFIG_RG_GPL
$(OPENRG_IMG):make_kernel make_image 
#else
 ifeq ($(CONFIG_RG_OS),LINUX_24)
  OTHER_TASKS=
 endif 
$(OPENRG_IMG):make_kernel 	
#endif

# Compile LINUX_BOOTLOADER_OBJECT twice. First with dummy variable values.
# Forcing $(LINUX_BOOTLOADER_OBJECT) to recompile.
$(LINUX_BOOTLOADER_OBJECT): dummy

real_boot_obj:
	$(MAKE) $(LINUX_BOOTLOADER_OBJECT).bin

STRIP_FLAGS=-R .comment -R .note

$(LINUX_BOOTLOADER_OBJECT).strip : $(LINUX_BOOTLOADER_OBJECT) dummy
	$(STRIP) $(STRIP_FLAGS) $< -o $@

$(LINUX_BOOTLOADER_OBJECT).bin: $(LINUX_BOOTLOADER_OBJECT).strip dummy
	$(OBJCOPY) -O binary $< $@

vmlinuz.pad: vmlinuz
	@cp vmlinuz vmlinuz.pad
	@$(call PADD,vmlinuz,vmlinuz.pad)

vmlinuz: vmlinux.bin
	gzip -vf9 -c $< > $@

vmlinux.bin: vmlinux.strip
	$(OBJCOPY) -O binary $< $@
	
vmlinux.strip: kernel/vmlinux
	$(STRIP) $(STRIP_FLAGS) $< -o $@

$(BOOTJUMP): boot_jump.o
	$(STRIP) $(STRIP_FLAGS) $^
	$(OBJCOPY) -O binary $^ $@
